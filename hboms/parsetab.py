
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADDASSIGN AND ASSIGN BREAK COLON COMMA COMMENT DIVIDE DOTDIVIDE DOTPOWER DOTTIMES ELSE EQUALS FOR GREATER GREATEREQUALS ID IDIVIDE IF IMAG IN INT LBRACE LBRACKET LESS LESSEQUALS LONGCOMMENT LOWER LPAREN MINUS MODULUS NOTEQUALS OR PIPE PLUS POWER QUESTIONMARK RBRACE RBRACKET REAL RETURN RPAREN SEMICOLON STRING TILDE TIMES TRANSPOSE TYPE_ARRAY TYPE_COMPLEX_MATRIX TYPE_COMPLEX_ROW_VECTOR TYPE_COMPLEX_VECTOR TYPE_INT TYPE_MATRIX TYPE_REAL TYPE_ROW_VECTOR TYPE_TUPLE TYPE_VECTOR UPPER\n    declaration_list : declaration\n                     | declaration declaration_list\n    declaration : LONGCOMMENTdeclaration : declaration COMMENT\n    declaration : statement\n                | unmatched\n    \n    declaration : type ID SEMICOLON\n    \n    id_list : ID COMMA ID\n            | ID COMMA id_list\n    \n    declaration : type id_list SEMICOLON\n    \n    declaration : type ID ASSIGN expression SEMICOLON\n    \n    statement : expression SEMICOLON\n    \n    statement : expression ASSIGN expression SEMICOLON\n    \n    statement : expression ADDASSIGN expression SEMICOLON\n    \n    statement : expression TILDE expression SEMICOLON\n    \n    statement : LBRACE declaration_list RBRACE\n    \n    unmatched : IF LPAREN expression RPAREN statement\n              | IF LPAREN expression RPAREN unmatched\n    \n    statement : IF LPAREN expression RPAREN statement ELSE statement\n    unmatched : IF LPAREN expression RPAREN statement ELSE unmatched\n    \n    statement : FOR LPAREN ID IN range RPAREN statement\n    unmatched : FOR LPAREN ID IN range RPAREN unmatched\n    \n    statement : RETURN expression SEMICOLON\n    \n    statement : BREAK SEMICOLON\n    range : expression COLON expressionrange : expressionexpression : disjunction QUESTIONMARK expression COLON expressionexpression : disjunctiondisjunction : disjunction OR conjunctiondisjunction : conjunctionconjunction : conjunction AND equalityconjunction : equalityequality : equality EQUALS comparisonequality : equality NOTEQUALS comparisonequality : comparisoncomparison : comparison LESS arithmaticcomparison : comparison LESSEQUALS arithmaticcomparison : comparison GREATER arithmaticcomparison : comparison GREATEREQUALS arithmaticcomparison : arithmaticarithmatic : arithmatic PLUS termarithmatic : arithmatic MINUS termarithmatic : termterm : term TIMES factorterm : term DOTTIMES factorterm : term DIVIDE factorterm : term DOTDIVIDE factorterm : term MODULUS factorterm : term IDIVIDE factorterm : factorfactor : unaryunary : baseunary : MINUS unaryunary : base POWER unaryunary : base DOTPOWER unary\n    base : rightunary\n    rightunary : rightunary TRANSPOSErightunary : rightunary LBRACKET range RBRACKET\n    range_list : range COMMA range\n               | range COMMA range_list\n    rightunary : rightunary LBRACKET range_list RBRACKETrightunary : primaryprimary : LPAREN expression RPARENprimary : REALprimary : IMAGprimary : INTprimary : STRINGprimary : ID\n    primary : ID LPAREN RPAREN\n            | ID LPAREN expression RPAREN\n            | ID LPAREN expression_list RPAREN\n    \n    primary : ID LPAREN expression PIPE expression RPAREN\n            | ID LPAREN expression PIPE expression_list RPAREN\n    \n    primary : LBRACKET expression_list RBRACKET\n            | LBRACKET expression RBRACKET\n            | LBRACKET RBRACKET\n    \n    primary : LBRACE expression_list RBRACE\n            | LBRACE expression RBRACE\n            | LBRACE RBRACE\n    \n    expression_list : expression COMMA expression\n                    | expression COMMA expression_list\n    lbound : LOWER ASSIGN arithmaticubound : UPPER ASSIGN arithmatic\n    chevrons : LESS lbound GREATER\n             | LESS ubound GREATER\n             | LESS lbound COMMA ubound GREATER\n    \n    type_prim_scalar : TYPE_REAL\n                     | TYPE_INT\n    \n    type_scalar : type_prim_scalar\n                | type_prim_scalar chevrons\n    \n    type_prim_vector : TYPE_VECTOR\n                     | TYPE_ROW_VECTOR\n    \n    type_vector : type_prim_vector LBRACKET expression RBRACKET\n                | type_prim_vector chevrons LBRACKET expression RBRACKET\n    \n    type_matrix : TYPE_MATRIX LBRACKET expression COMMA expression RBRACKET\n                | TYPE_MATRIX chevrons LBRACKET expression COMMA expression RBRACKET\n    \n    type_array : TYPE_ARRAY LBRACKET expression RBRACKET type\n               | TYPE_ARRAY LBRACKET expression_list RBRACKET type\n    \n    type_list : type COMMA type\n              | type COMMA type_list\n    \n    type_tuple : TYPE_TUPLE LPAREN type_list RPAREN\n    \n    type : type_scalar\n         | type_vector\n         | type_matrix\n         | type_array\n         | type_tuple\n    '
    
_lr_action_items = {'LONGCOMMENT':([0,2,3,4,5,9,47,51,64,98,101,108,116,159,160,161,184,187,188,211,212,213,214,],[3,3,-3,-5,-6,3,-4,-12,-24,-7,-10,-16,-23,-13,-14,-15,-11,-17,-18,-19,-20,-21,-22,]),'LBRACE':([0,2,3,4,5,9,11,13,23,36,47,50,51,52,53,54,59,61,64,65,66,69,74,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,97,98,99,101,108,111,116,124,128,157,159,160,161,164,165,166,170,171,174,181,183,184,187,188,196,206,207,211,212,213,214,],[9,9,-3,-5,-6,9,61,61,61,61,-4,61,-12,61,61,61,61,61,-24,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-7,61,-10,-16,61,-23,61,61,61,-13,-14,-15,9,61,61,61,61,61,61,61,-11,-17,-18,61,9,9,-19,-20,-21,-22,]),'IF':([0,2,3,4,5,9,47,51,64,98,101,108,116,159,160,161,164,184,187,188,206,207,211,212,213,214,],[10,10,-3,-5,-6,10,-4,-12,-24,-7,-10,-16,-23,-13,-14,-15,10,-11,-17,-18,10,10,-19,-20,-21,-22,]),'FOR':([0,2,3,4,5,9,47,51,64,98,101,108,116,159,160,161,164,184,187,188,206,207,211,212,213,214,],[12,12,-3,-5,-6,12,-4,-12,-24,-7,-10,-16,-23,-13,-14,-15,12,-11,-17,-18,12,12,-19,-20,-21,-22,]),'RETURN':([0,2,3,4,5,9,47,51,64,98,101,108,116,159,160,161,164,184,187,188,206,207,211,212,213,214,],[13,13,-3,-5,-6,13,-4,-12,-24,-7,-10,-16,-23,-13,-14,-15,13,-11,-17,-18,13,13,-19,-20,-21,-22,]),'BREAK':([0,2,3,4,5,9,47,51,64,98,101,108,116,159,160,161,164,184,187,188,206,207,211,212,213,214,],[14,14,-3,-5,-6,14,-4,-12,-24,-7,-10,-16,-23,-13,-14,-15,14,-11,-17,-18,14,14,-19,-20,-21,-22,]),'TYPE_MATRIX':([0,2,3,4,5,9,47,51,64,77,98,101,108,116,159,160,161,176,177,179,184,187,188,211,212,213,214,],[24,24,-3,-5,-6,24,-4,-12,-24,24,-7,-10,-16,-23,-13,-14,-15,24,24,24,-11,-17,-18,-19,-20,-21,-22,]),'TYPE_ARRAY':([0,2,3,4,5,9,47,51,64,77,98,101,108,116,159,160,161,176,177,179,184,187,188,211,212,213,214,],[25,25,-3,-5,-6,25,-4,-12,-24,25,-7,-10,-16,-23,-13,-14,-15,25,25,25,-11,-17,-18,-19,-20,-21,-22,]),'TYPE_TUPLE':([0,2,3,4,5,9,47,51,64,77,98,101,108,116,159,160,161,176,177,179,184,187,188,211,212,213,214,],[26,26,-3,-5,-6,26,-4,-12,-24,26,-7,-10,-16,-23,-13,-14,-15,26,26,26,-11,-17,-18,-19,-20,-21,-22,]),'TYPE_REAL':([0,2,3,4,5,9,47,51,64,77,98,101,108,116,159,160,161,176,177,179,184,187,188,211,212,213,214,],[28,28,-3,-5,-6,28,-4,-12,-24,28,-7,-10,-16,-23,-13,-14,-15,28,28,28,-11,-17,-18,-19,-20,-21,-22,]),'TYPE_INT':([0,2,3,4,5,9,47,51,64,77,98,101,108,116,159,160,161,176,177,179,184,187,188,211,212,213,214,],[29,29,-3,-5,-6,29,-4,-12,-24,29,-7,-10,-16,-23,-13,-14,-15,29,29,29,-11,-17,-18,-19,-20,-21,-22,]),'TYPE_VECTOR':([0,2,3,4,5,9,47,51,64,77,98,101,108,116,159,160,161,176,177,179,184,187,188,211,212,213,214,],[30,30,-3,-5,-6,30,-4,-12,-24,30,-7,-10,-16,-23,-13,-14,-15,30,30,30,-11,-17,-18,-19,-20,-21,-22,]),'TYPE_ROW_VECTOR':([0,2,3,4,5,9,47,51,64,77,98,101,108,116,159,160,161,176,177,179,184,187,188,211,212,213,214,],[31,31,-3,-5,-6,31,-4,-12,-24,31,-7,-10,-16,-23,-13,-14,-15,31,31,31,-11,-17,-18,-19,-20,-21,-22,]),'MINUS':([0,2,3,4,5,7,9,11,13,23,34,35,36,37,38,39,40,41,42,43,44,45,47,50,51,52,53,54,56,59,61,64,65,66,69,72,74,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,108,109,110,111,113,116,124,125,126,128,136,137,138,139,140,141,142,143,144,145,146,147,148,149,156,157,158,159,160,161,164,165,166,170,171,174,180,181,182,183,184,187,188,192,193,196,204,205,206,207,211,212,213,214,],[36,36,-3,-5,-6,-68,36,36,36,36,86,-43,36,-50,-51,-52,-56,-62,-64,-65,-66,-67,-4,36,-12,36,36,36,-79,36,36,-24,36,36,36,-76,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-53,36,36,-57,36,-7,36,-10,-69,-16,-77,-78,36,-63,-23,36,-74,-75,36,86,86,86,86,-41,-42,-44,-45,-46,-47,-48,-49,-54,-55,-70,36,-71,-13,-14,-15,36,36,36,36,36,36,-58,36,-61,36,-11,-17,-18,86,86,36,-72,-73,36,36,-19,-20,-21,-22,]),'LPAREN':([0,2,3,4,5,7,9,10,11,12,13,23,26,36,47,50,51,52,53,54,59,61,64,65,66,69,74,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,97,98,99,101,108,111,116,124,128,157,159,160,161,164,165,166,170,171,174,181,183,184,187,188,196,206,207,211,212,213,214,],[11,11,-3,-5,-6,50,11,59,11,62,11,11,77,11,-4,11,-12,11,11,11,11,11,-24,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-7,11,-10,-16,11,-23,11,11,11,-13,-14,-15,11,11,11,11,11,11,11,11,-11,-17,-18,11,11,11,-19,-20,-21,-22,]),'REAL':([0,2,3,4,5,9,11,13,23,36,47,50,51,52,53,54,59,61,64,65,66,69,74,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,97,98,99,101,108,111,116,124,128,157,159,160,161,164,165,166,170,171,174,181,183,184,187,188,196,206,207,211,212,213,214,],[42,42,-3,-5,-6,42,42,42,42,42,-4,42,-12,42,42,42,42,42,-24,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-7,42,-10,-16,42,-23,42,42,42,-13,-14,-15,42,42,42,42,42,42,42,42,-11,-17,-18,42,42,42,-19,-20,-21,-22,]),'IMAG':([0,2,3,4,5,9,11,13,23,36,47,50,51,52,53,54,59,61,64,65,66,69,74,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,97,98,99,101,108,111,116,124,128,157,159,160,161,164,165,166,170,171,174,181,183,184,187,188,196,206,207,211,212,213,214,],[43,43,-3,-5,-6,43,43,43,43,43,-4,43,-12,43,43,43,43,43,-24,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-7,43,-10,-16,43,-23,43,43,43,-13,-14,-15,43,43,43,43,43,43,43,43,-11,-17,-18,43,43,43,-19,-20,-21,-22,]),'INT':([0,2,3,4,5,9,11,13,23,36,47,50,51,52,53,54,59,61,64,65,66,69,74,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,97,98,99,101,108,111,116,124,128,157,159,160,161,164,165,166,170,171,174,181,183,184,187,188,196,206,207,211,212,213,214,],[44,44,-3,-5,-6,44,44,44,44,44,-4,44,-12,44,44,44,44,44,-24,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-7,44,-10,-16,44,-23,44,44,44,-13,-14,-15,44,44,44,44,44,44,44,44,-11,-17,-18,44,44,44,-19,-20,-21,-22,]),'STRING':([0,2,3,4,5,9,11,13,23,36,47,50,51,52,53,54,59,61,64,65,66,69,74,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,97,98,99,101,108,111,116,124,128,157,159,160,161,164,165,166,170,171,174,181,183,184,187,188,196,206,207,211,212,213,214,],[45,45,-3,-5,-6,45,45,45,45,45,-4,45,-12,45,45,45,45,45,-24,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-7,45,-10,-16,45,-23,45,45,45,-13,-14,-15,45,45,45,45,45,45,45,45,-11,-17,-18,45,45,45,-19,-20,-21,-22,]),'ID':([0,2,3,4,5,6,9,11,13,15,16,17,18,19,21,23,28,29,36,47,50,51,52,53,54,59,61,62,64,65,66,67,69,74,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,97,98,99,100,101,108,111,116,124,128,157,159,160,161,164,165,166,167,169,170,171,172,174,178,181,183,184,187,188,194,196,197,198,206,207,208,209,211,212,213,214,215,],[7,7,-3,-5,-6,48,7,7,7,-102,-103,-104,-105,-106,-89,7,-87,-88,7,-4,7,-12,7,7,7,7,7,115,-24,7,7,-90,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-7,7,154,-10,-16,7,-23,7,7,7,-13,-14,-15,7,7,7,-84,-85,7,7,-93,7,-101,7,7,-11,-17,-18,-94,7,-97,-98,7,7,-86,-95,-19,-20,-21,-22,-96,]),'LBRACKET':([0,2,3,4,5,7,9,11,13,22,23,24,25,30,31,36,40,41,42,43,44,45,47,50,51,52,53,54,56,59,61,64,65,66,69,70,72,74,75,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,96,97,98,99,101,102,108,109,110,111,113,116,124,125,126,128,156,157,158,159,160,161,164,165,166,167,169,170,171,174,180,181,182,183,184,187,188,196,204,205,206,207,208,211,212,213,214,],[23,23,-3,-5,-6,-68,23,23,23,69,23,74,76,-91,-92,23,97,-62,-64,-65,-66,-67,-4,23,-12,23,23,23,-79,23,23,-24,23,23,23,124,-76,23,128,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-57,23,-7,23,-10,-69,-16,-77,-78,23,-63,-23,23,-74,-75,23,-70,23,-71,-13,-14,-15,23,23,23,-84,-85,23,23,23,-58,23,-61,23,-11,-17,-18,23,-72,-73,23,23,-86,-19,-20,-21,-22,]),'$end':([1,2,3,4,5,46,47,51,64,98,101,108,116,159,160,161,184,187,188,211,212,213,214,],[0,-1,-3,-5,-6,-2,-4,-12,-24,-7,-10,-16,-23,-13,-14,-15,-11,-17,-18,-19,-20,-21,-22,]),'RBRACE':([2,3,4,5,7,9,20,27,32,33,34,35,37,38,39,40,41,42,43,44,45,46,47,51,55,56,57,58,61,64,72,93,96,98,101,102,108,109,110,113,114,116,118,125,126,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,156,158,159,160,161,162,163,180,182,184,187,188,190,204,205,211,212,213,214,],[-1,-3,-5,-6,-68,56,-28,-30,-32,-35,-40,-43,-50,-51,-52,-56,-62,-64,-65,-66,-67,-2,-4,-12,108,-79,109,110,56,-24,-76,-53,-57,-7,-10,-69,-16,-77,-78,-63,110,-23,-29,-74,-75,-31,-33,-34,-36,-37,-38,-39,-41,-42,-44,-45,-46,-47,-48,-49,-54,-55,-70,-71,-13,-14,-15,-80,-81,-58,-61,-11,-17,-18,-27,-72,-73,-19,-20,-21,-22,]),'COMMENT':([2,3,4,5,47,51,64,98,101,108,116,159,160,161,184,187,188,211,212,213,214,],[47,-3,-5,-6,-4,-12,-24,-7,-10,-16,-23,-13,-14,-15,-11,-17,-18,-19,-20,-21,-22,]),'TRANSPOSE':([7,40,41,42,43,44,45,56,72,96,102,109,110,113,125,126,156,158,180,182,204,205,],[-68,96,-62,-64,-65,-66,-67,-79,-76,-57,-69,-77,-78,-63,-74,-75,-70,-71,-58,-61,-72,-73,]),'POWER':([7,39,40,41,42,43,44,45,56,72,96,102,109,110,113,125,126,156,158,180,182,204,205,],[-68,94,-56,-62,-64,-65,-66,-67,-79,-76,-57,-69,-77,-78,-63,-74,-75,-70,-71,-58,-61,-72,-73,]),'DOTPOWER':([7,39,40,41,42,43,44,45,56,72,96,102,109,110,113,125,126,156,158,180,182,204,205,],[-68,95,-56,-62,-64,-65,-66,-67,-79,-76,-57,-69,-77,-78,-63,-74,-75,-70,-71,-58,-61,-72,-73,]),'TIMES':([7,35,37,38,39,40,41,42,43,44,45,56,72,93,96,102,109,110,113,125,126,140,141,142,143,144,145,146,147,148,149,156,158,180,182,204,205,],[-68,87,-50,-51,-52,-56,-62,-64,-65,-66,-67,-79,-76,-53,-57,-69,-77,-78,-63,-74,-75,87,87,-44,-45,-46,-47,-48,-49,-54,-55,-70,-71,-58,-61,-72,-73,]),'DOTTIMES':([7,35,37,38,39,40,41,42,43,44,45,56,72,93,96,102,109,110,113,125,126,140,141,142,143,144,145,146,147,148,149,156,158,180,182,204,205,],[-68,88,-50,-51,-52,-56,-62,-64,-65,-66,-67,-79,-76,-53,-57,-69,-77,-78,-63,-74,-75,88,88,-44,-45,-46,-47,-48,-49,-54,-55,-70,-71,-58,-61,-72,-73,]),'DIVIDE':([7,35,37,38,39,40,41,42,43,44,45,56,72,93,96,102,109,110,113,125,126,140,141,142,143,144,145,146,147,148,149,156,158,180,182,204,205,],[-68,89,-50,-51,-52,-56,-62,-64,-65,-66,-67,-79,-76,-53,-57,-69,-77,-78,-63,-74,-75,89,89,-44,-45,-46,-47,-48,-49,-54,-55,-70,-71,-58,-61,-72,-73,]),'DOTDIVIDE':([7,35,37,38,39,40,41,42,43,44,45,56,72,93,96,102,109,110,113,125,126,140,141,142,143,144,145,146,147,148,149,156,158,180,182,204,205,],[-68,90,-50,-51,-52,-56,-62,-64,-65,-66,-67,-79,-76,-53,-57,-69,-77,-78,-63,-74,-75,90,90,-44,-45,-46,-47,-48,-49,-54,-55,-70,-71,-58,-61,-72,-73,]),'MODULUS':([7,35,37,38,39,40,41,42,43,44,45,56,72,93,96,102,109,110,113,125,126,140,141,142,143,144,145,146,147,148,149,156,158,180,182,204,205,],[-68,91,-50,-51,-52,-56,-62,-64,-65,-66,-67,-79,-76,-53,-57,-69,-77,-78,-63,-74,-75,91,91,-44,-45,-46,-47,-48,-49,-54,-55,-70,-71,-58,-61,-72,-73,]),'IDIVIDE':([7,35,37,38,39,40,41,42,43,44,45,56,72,93,96,102,109,110,113,125,126,140,141,142,143,144,145,146,147,148,149,156,158,180,182,204,205,],[-68,92,-50,-51,-52,-56,-62,-64,-65,-66,-67,-79,-76,-53,-57,-69,-77,-78,-63,-74,-75,92,92,-44,-45,-46,-47,-48,-49,-54,-55,-70,-71,-58,-61,-72,-73,]),'PLUS':([7,34,35,37,38,39,40,41,42,43,44,45,56,72,93,96,102,109,110,113,125,126,136,137,138,139,140,141,142,143,144,145,146,147,148,149,156,158,180,182,192,193,204,205,],[-68,85,-43,-50,-51,-52,-56,-62,-64,-65,-66,-67,-79,-76,-53,-57,-69,-77,-78,-63,-74,-75,85,85,85,85,-41,-42,-44,-45,-46,-47,-48,-49,-54,-55,-70,-71,-58,-61,85,85,-72,-73,]),'LESS':([7,21,22,24,28,29,30,31,33,34,35,37,38,39,40,41,42,43,44,45,56,72,93,96,102,109,110,113,125,126,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,156,158,180,182,204,205,],[-68,68,68,68,-87,-88,-91,-92,81,-40,-43,-50,-51,-52,-56,-62,-64,-65,-66,-67,-79,-76,-53,-57,-69,-77,-78,-63,-74,-75,81,81,-36,-37,-38,-39,-41,-42,-44,-45,-46,-47,-48,-49,-54,-55,-70,-71,-58,-61,-72,-73,]),'LESSEQUALS':([7,33,34,35,37,38,39,40,41,42,43,44,45,56,72,93,96,102,109,110,113,125,126,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,156,158,180,182,204,205,],[-68,82,-40,-43,-50,-51,-52,-56,-62,-64,-65,-66,-67,-79,-76,-53,-57,-69,-77,-78,-63,-74,-75,82,82,-36,-37,-38,-39,-41,-42,-44,-45,-46,-47,-48,-49,-54,-55,-70,-71,-58,-61,-72,-73,]),'GREATER':([7,33,34,35,37,38,39,40,41,42,43,44,45,56,72,93,96,102,109,110,113,119,120,125,126,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,156,158,180,182,191,192,193,204,205,],[-68,83,-40,-43,-50,-51,-52,-56,-62,-64,-65,-66,-67,-79,-76,-53,-57,-69,-77,-78,-63,167,169,-74,-75,83,83,-36,-37,-38,-39,-41,-42,-44,-45,-46,-47,-48,-49,-54,-55,-70,-71,-58,-61,208,-82,-83,-72,-73,]),'GREATEREQUALS':([7,33,34,35,37,38,39,40,41,42,43,44,45,56,72,93,96,102,109,110,113,125,126,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,156,158,180,182,204,205,],[-68,84,-40,-43,-50,-51,-52,-56,-62,-64,-65,-66,-67,-79,-76,-53,-57,-69,-77,-78,-63,-74,-75,84,84,-36,-37,-38,-39,-41,-42,-44,-45,-46,-47,-48,-49,-54,-55,-70,-71,-58,-61,-72,-73,]),'EQUALS':([7,32,33,34,35,37,38,39,40,41,42,43,44,45,56,72,93,96,102,109,110,113,125,126,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,156,158,180,182,204,205,],[-68,79,-35,-40,-43,-50,-51,-52,-56,-62,-64,-65,-66,-67,-79,-76,-53,-57,-69,-77,-78,-63,-74,-75,79,-33,-34,-36,-37,-38,-39,-41,-42,-44,-45,-46,-47,-48,-49,-54,-55,-70,-71,-58,-61,-72,-73,]),'NOTEQUALS':([7,32,33,34,35,37,38,39,40,41,42,43,44,45,56,72,93,96,102,109,110,113,125,126,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,156,158,180,182,204,205,],[-68,80,-35,-40,-43,-50,-51,-52,-56,-62,-64,-65,-66,-67,-79,-76,-53,-57,-69,-77,-78,-63,-74,-75,80,-33,-34,-36,-37,-38,-39,-41,-42,-44,-45,-46,-47,-48,-49,-54,-55,-70,-71,-58,-61,-72,-73,]),'AND':([7,27,32,33,34,35,37,38,39,40,41,42,43,44,45,56,72,93,96,102,109,110,113,118,125,126,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,156,158,180,182,204,205,],[-68,78,-32,-35,-40,-43,-50,-51,-52,-56,-62,-64,-65,-66,-67,-79,-76,-53,-57,-69,-77,-78,-63,78,-74,-75,-31,-33,-34,-36,-37,-38,-39,-41,-42,-44,-45,-46,-47,-48,-49,-54,-55,-70,-71,-58,-61,-72,-73,]),'QUESTIONMARK':([7,20,27,32,33,34,35,37,38,39,40,41,42,43,44,45,56,72,93,96,102,109,110,113,118,125,126,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,156,158,180,182,204,205,],[-68,65,-30,-32,-35,-40,-43,-50,-51,-52,-56,-62,-64,-65,-66,-67,-79,-76,-53,-57,-69,-77,-78,-63,-29,-74,-75,-31,-33,-34,-36,-37,-38,-39,-41,-42,-44,-45,-46,-47,-48,-49,-54,-55,-70,-71,-58,-61,-72,-73,]),'OR':([7,20,27,32,33,34,35,37,38,39,40,41,42,43,44,45,56,72,93,96,102,109,110,113,118,125,126,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,156,158,180,182,204,205,],[-68,66,-30,-32,-35,-40,-43,-50,-51,-52,-56,-62,-64,-65,-66,-67,-79,-76,-53,-57,-69,-77,-78,-63,-29,-74,-75,-31,-33,-34,-36,-37,-38,-39,-41,-42,-44,-45,-46,-47,-48,-49,-54,-55,-70,-71,-58,-61,-72,-73,]),'SEMICOLON':([7,8,14,20,27,32,33,34,35,37,38,39,40,41,42,43,44,45,48,49,56,58,63,72,93,96,102,105,106,107,109,110,113,118,125,126,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,153,154,155,156,158,180,182,190,204,205,],[-68,51,64,-28,-30,-32,-35,-40,-43,-50,-51,-52,-56,-62,-64,-65,-66,-67,98,101,-79,51,116,-76,-53,-57,-69,159,160,161,-77,-78,-63,-29,-74,-75,-31,-33,-34,-36,-37,-38,-39,-41,-42,-44,-45,-46,-47,-48,-49,-54,-55,184,-8,-9,-70,-71,-58,-61,-27,-72,-73,]),'ASSIGN':([7,8,20,27,32,33,34,35,37,38,39,40,41,42,43,44,45,48,56,58,72,93,96,102,109,110,113,118,121,122,125,126,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,156,158,180,182,190,204,205,],[-68,52,-28,-30,-32,-35,-40,-43,-50,-51,-52,-56,-62,-64,-65,-66,-67,99,-79,52,-76,-53,-57,-69,-77,-78,-63,-29,170,171,-74,-75,-31,-33,-34,-36,-37,-38,-39,-41,-42,-44,-45,-46,-47,-48,-49,-54,-55,-70,-71,-58,-61,-27,-72,-73,]),'ADDASSIGN':([7,8,20,27,32,33,34,35,37,38,39,40,41,42,43,44,45,56,58,72,93,96,102,109,110,113,118,125,126,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,156,158,180,182,190,204,205,],[-68,53,-28,-30,-32,-35,-40,-43,-50,-51,-52,-56,-62,-64,-65,-66,-67,-79,53,-76,-53,-57,-69,-77,-78,-63,-29,-74,-75,-31,-33,-34,-36,-37,-38,-39,-41,-42,-44,-45,-46,-47,-48,-49,-54,-55,-70,-71,-58,-61,-27,-72,-73,]),'TILDE':([7,8,20,27,32,33,34,35,37,38,39,40,41,42,43,44,45,56,58,72,93,96,102,109,110,113,118,125,126,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,156,158,180,182,190,204,205,],[-68,54,-28,-30,-32,-35,-40,-43,-50,-51,-52,-56,-62,-64,-65,-66,-67,-79,54,-76,-53,-57,-69,-77,-78,-63,-29,-74,-75,-31,-33,-34,-36,-37,-38,-39,-41,-42,-44,-45,-46,-47,-48,-49,-54,-55,-70,-71,-58,-61,-27,-72,-73,]),'COMMA':([7,15,16,17,18,19,20,21,27,28,29,32,33,34,35,37,38,39,40,41,42,43,44,45,48,56,58,67,72,73,93,96,102,103,109,110,113,114,118,119,125,126,127,129,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,154,156,158,162,167,169,172,175,178,180,182,185,190,192,194,197,198,199,201,203,204,205,208,209,215,],[-68,-102,-103,-104,-105,-106,-28,-89,-30,-87,-88,-32,-35,-40,-43,-50,-51,-52,-56,-62,-64,-65,-66,-67,100,-79,111,-90,-76,111,-53,-57,-69,111,-77,-78,-63,111,-29,168,-74,-75,174,111,179,-31,-33,-34,-36,-37,-38,-39,-41,-42,-44,-45,-46,-47,-48,-49,-54,-55,181,-26,100,-70,-71,111,-84,-85,-93,196,-101,-58,-61,111,-27,-82,-94,-97,-98,179,181,-25,-72,-73,-86,-95,-96,]),'RPAREN':([7,15,16,17,18,19,20,21,27,28,29,32,33,34,35,37,38,39,40,41,42,43,44,45,50,56,60,67,72,93,96,102,103,104,109,110,112,113,118,125,126,131,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,156,158,162,163,167,169,172,178,180,182,185,186,189,190,194,197,198,199,200,203,204,205,208,209,215,],[-68,-102,-103,-104,-105,-106,-28,-89,-30,-87,-88,-32,-35,-40,-43,-50,-51,-52,-56,-62,-64,-65,-66,-67,102,-79,113,-90,-76,-53,-57,-69,156,158,-77,-78,164,-63,-29,-74,-75,178,-31,-33,-34,-36,-37,-38,-39,-41,-42,-44,-45,-46,-47,-48,-49,-54,-55,-26,-70,-71,-80,-81,-84,-85,-93,-101,-58,-61,204,205,207,-27,-94,-97,-98,-99,-100,-25,-72,-73,-86,-95,-96,]),'RBRACKET':([7,20,23,27,32,33,34,35,37,38,39,40,41,42,43,44,45,56,71,72,73,93,96,102,109,110,113,118,123,125,126,129,130,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,156,158,162,163,173,180,182,190,195,201,202,203,204,205,210,],[-68,-28,72,-30,-32,-35,-40,-43,-50,-51,-52,-56,-62,-64,-65,-66,-67,-79,125,-76,126,-53,-57,-69,-77,-78,-63,-29,172,-74,-75,176,177,-31,-33,-34,-36,-37,-38,-39,-41,-42,-44,-45,-46,-47,-48,-49,-54,-55,180,182,-26,-70,-71,-80,-81,194,-58,-61,-27,209,-59,-60,-25,-72,-73,215,]),'PIPE':([7,20,27,32,33,34,35,37,38,39,40,41,42,43,44,45,56,72,93,96,102,103,109,110,113,118,125,126,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,156,158,180,182,190,204,205,],[-68,-28,-30,-32,-35,-40,-43,-50,-51,-52,-56,-62,-64,-65,-66,-67,-79,-76,-53,-57,-69,157,-77,-78,-63,-29,-74,-75,-31,-33,-34,-36,-37,-38,-39,-41,-42,-44,-45,-46,-47,-48,-49,-54,-55,-70,-71,-58,-61,-27,-72,-73,]),'COLON':([7,20,27,32,33,34,35,37,38,39,40,41,42,43,44,45,56,72,93,96,102,109,110,113,117,118,125,126,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,156,158,180,182,190,204,205,],[-68,-28,-30,-32,-35,-40,-43,-50,-51,-52,-56,-62,-64,-65,-66,-67,-79,-76,-53,-57,-69,-77,-78,-63,166,-29,-74,-75,-31,-33,-34,-36,-37,-38,-39,-41,-42,-44,-45,-46,-47,-48,-49,-54,-55,183,-70,-71,-58,-61,-27,-72,-73,]),'ELSE':([51,64,108,116,159,160,161,187,211,213,],[-12,-24,-16,-23,-13,-14,-15,206,-19,-21,]),'LOWER':([68,],[121,]),'UPPER':([68,168,],[122,122,]),'IN':([115,],[165,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declaration_list':([0,2,9,],[1,46,55,]),'declaration':([0,2,9,],[2,2,2,]),'statement':([0,2,9,164,206,207,],[4,4,4,187,211,213,]),'unmatched':([0,2,9,164,206,207,],[5,5,5,188,212,214,]),'type':([0,2,9,77,176,177,179,],[6,6,6,132,197,198,199,]),'expression':([0,2,9,11,13,23,50,52,53,54,59,61,65,69,74,76,97,99,111,124,128,157,164,165,166,174,181,183,196,206,207,],[8,8,58,60,63,73,103,105,106,107,112,114,117,123,127,129,152,153,162,173,175,185,8,152,190,195,152,203,210,8,8,]),'type_scalar':([0,2,9,77,176,177,179,],[15,15,15,15,15,15,15,]),'type_vector':([0,2,9,77,176,177,179,],[16,16,16,16,16,16,16,]),'type_matrix':([0,2,9,77,176,177,179,],[17,17,17,17,17,17,17,]),'type_array':([0,2,9,77,176,177,179,],[18,18,18,18,18,18,18,]),'type_tuple':([0,2,9,77,176,177,179,],[19,19,19,19,19,19,19,]),'disjunction':([0,2,9,11,13,23,50,52,53,54,59,61,65,69,74,76,97,99,111,124,128,157,164,165,166,174,181,183,196,206,207,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'type_prim_scalar':([0,2,9,77,176,177,179,],[21,21,21,21,21,21,21,]),'type_prim_vector':([0,2,9,77,176,177,179,],[22,22,22,22,22,22,22,]),'conjunction':([0,2,9,11,13,23,50,52,53,54,59,61,65,66,69,74,76,97,99,111,124,128,157,164,165,166,174,181,183,196,206,207,],[27,27,27,27,27,27,27,27,27,27,27,27,27,118,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'equality':([0,2,9,11,13,23,50,52,53,54,59,61,65,66,69,74,76,78,97,99,111,124,128,157,164,165,166,174,181,183,196,206,207,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,133,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'comparison':([0,2,9,11,13,23,50,52,53,54,59,61,65,66,69,74,76,78,79,80,97,99,111,124,128,157,164,165,166,174,181,183,196,206,207,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,134,135,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'arithmatic':([0,2,9,11,13,23,50,52,53,54,59,61,65,66,69,74,76,78,79,80,81,82,83,84,97,99,111,124,128,157,164,165,166,170,171,174,181,183,196,206,207,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,136,137,138,139,34,34,34,34,34,34,34,34,34,192,193,34,34,34,34,34,34,]),'term':([0,2,9,11,13,23,50,52,53,54,59,61,65,66,69,74,76,78,79,80,81,82,83,84,85,86,97,99,111,124,128,157,164,165,166,170,171,174,181,183,196,206,207,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,140,141,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'factor':([0,2,9,11,13,23,50,52,53,54,59,61,65,66,69,74,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,97,99,111,124,128,157,164,165,166,170,171,174,181,183,196,206,207,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,142,143,144,145,146,147,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'unary':([0,2,9,11,13,23,36,50,52,53,54,59,61,65,66,69,74,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,97,99,111,124,128,157,164,165,166,170,171,174,181,183,196,206,207,],[38,38,38,38,38,38,93,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,148,149,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'base':([0,2,9,11,13,23,36,50,52,53,54,59,61,65,66,69,74,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,97,99,111,124,128,157,164,165,166,170,171,174,181,183,196,206,207,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'rightunary':([0,2,9,11,13,23,36,50,52,53,54,59,61,65,66,69,74,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,97,99,111,124,128,157,164,165,166,170,171,174,181,183,196,206,207,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'primary':([0,2,9,11,13,23,36,50,52,53,54,59,61,65,66,69,74,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,97,99,111,124,128,157,164,165,166,170,171,174,181,183,196,206,207,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'id_list':([6,100,],[49,155,]),'expression_list':([9,23,50,61,76,111,157,],[57,71,104,57,130,163,186,]),'chevrons':([21,22,24,],[67,70,75,]),'lbound':([68,],[119,]),'ubound':([68,168,],[120,191,]),'type_list':([77,179,],[131,200,]),'range':([97,165,181,],[150,189,201,]),'range_list':([97,181,],[151,202,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> declaration_list","S'",1,None,None,None),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','stanparser.py',11),
  ('declaration_list -> declaration declaration_list','declaration_list',2,'p_declaration_list','stanparser.py',12),
  ('declaration -> LONGCOMMENT','declaration',1,'p_declaration_longcomment','stanparser.py',26),
  ('declaration -> declaration COMMENT','declaration',2,'p_declaration_comment','stanparser.py',31),
  ('declaration -> statement','declaration',1,'p_declaration_conditional','stanparser.py',38),
  ('declaration -> unmatched','declaration',1,'p_declaration_conditional','stanparser.py',39),
  ('declaration -> type ID SEMICOLON','declaration',3,'p_declaration_var','stanparser.py',46),
  ('id_list -> ID COMMA ID','id_list',3,'p_id_list','stanparser.py',53),
  ('id_list -> ID COMMA id_list','id_list',3,'p_id_list','stanparser.py',54),
  ('declaration -> type id_list SEMICOLON','declaration',3,'p_declaration_decl_list','stanparser.py',67),
  ('declaration -> type ID ASSIGN expression SEMICOLON','declaration',5,'p_declaration_assign','stanparser.py',74),
  ('statement -> expression SEMICOLON','statement',2,'p_statement_expr','stanparser.py',81),
  ('statement -> expression ASSIGN expression SEMICOLON','statement',4,'p_statement_assign','stanparser.py',88),
  ('statement -> expression ADDASSIGN expression SEMICOLON','statement',4,'p_statement_add_assign','stanparser.py',95),
  ('statement -> expression TILDE expression SEMICOLON','statement',4,'p_statement_sample','stanparser.py',102),
  ('statement -> LBRACE declaration_list RBRACE','statement',3,'p_statement_block','stanparser.py',110),
  ('unmatched -> IF LPAREN expression RPAREN statement','unmatched',5,'p_statement_if','stanparser.py',117),
  ('unmatched -> IF LPAREN expression RPAREN unmatched','unmatched',5,'p_statement_if','stanparser.py',118),
  ('statement -> IF LPAREN expression RPAREN statement ELSE statement','statement',7,'p_statement_if_else','stanparser.py',125),
  ('unmatched -> IF LPAREN expression RPAREN statement ELSE unmatched','unmatched',7,'p_statement_if_else','stanparser.py',126),
  ('statement -> FOR LPAREN ID IN range RPAREN statement','statement',7,'p_statement_for','stanparser.py',133),
  ('unmatched -> FOR LPAREN ID IN range RPAREN unmatched','unmatched',7,'p_statement_for','stanparser.py',134),
  ('statement -> RETURN expression SEMICOLON','statement',3,'p_statement_return','stanparser.py',142),
  ('statement -> BREAK SEMICOLON','statement',2,'p_statement_break','stanparser.py',149),
  ('range -> expression COLON expression','range',3,'p_range','stanparser.py',158),
  ('range -> expression','range',1,'p_range_expression','stanparser.py',163),
  ('expression -> disjunction QUESTIONMARK expression COLON expression','expression',5,'p_expression_ternary','stanparser.py',190),
  ('expression -> disjunction','expression',1,'p_expression_disjunction','stanparser.py',198),
  ('disjunction -> disjunction OR conjunction','disjunction',3,'p_disjunction_or','stanparser.py',203),
  ('disjunction -> conjunction','disjunction',1,'p_disjunction_conjunction','stanparser.py',208),
  ('conjunction -> conjunction AND equality','conjunction',3,'p_conjunction_and','stanparser.py',213),
  ('conjunction -> equality','conjunction',1,'p_conjunction_equality','stanparser.py',218),
  ('equality -> equality EQUALS comparison','equality',3,'p_equality_equals','stanparser.py',223),
  ('equality -> equality NOTEQUALS comparison','equality',3,'p_equality_notequals','stanparser.py',228),
  ('equality -> comparison','equality',1,'p_equality_comparison','stanparser.py',233),
  ('comparison -> comparison LESS arithmatic','comparison',3,'p_comparison_less','stanparser.py',238),
  ('comparison -> comparison LESSEQUALS arithmatic','comparison',3,'p_comparison_lessequals','stanparser.py',243),
  ('comparison -> comparison GREATER arithmatic','comparison',3,'p_comparison_greater','stanparser.py',248),
  ('comparison -> comparison GREATEREQUALS arithmatic','comparison',3,'p_comparison_greaterequals','stanparser.py',253),
  ('comparison -> arithmatic','comparison',1,'p_comparison_arithmatic','stanparser.py',258),
  ('arithmatic -> arithmatic PLUS term','arithmatic',3,'p_arithmatic_plus','stanparser.py',266),
  ('arithmatic -> arithmatic MINUS term','arithmatic',3,'p_arithmatic_minus','stanparser.py',271),
  ('arithmatic -> term','arithmatic',1,'p_arithmatic_term','stanparser.py',279),
  ('term -> term TIMES factor','term',3,'p_term_times','stanparser.py',284),
  ('term -> term DOTTIMES factor','term',3,'p_term_dottimes','stanparser.py',289),
  ('term -> term DIVIDE factor','term',3,'p_term_div','stanparser.py',294),
  ('term -> term DOTDIVIDE factor','term',3,'p_term_dotdiv','stanparser.py',299),
  ('term -> term MODULUS factor','term',3,'p_term_modulo','stanparser.py',304),
  ('term -> term IDIVIDE factor','term',3,'p_term_idiv','stanparser.py',312),
  ('term -> factor','term',1,'p_term_factor','stanparser.py',320),
  ('factor -> unary','factor',1,'p_factor_unary','stanparser.py',325),
  ('unary -> base','unary',1,'p_unary_exponent','stanparser.py',333),
  ('unary -> MINUS unary','unary',2,'p_unary_negate','stanparser.py',338),
  ('unary -> base POWER unary','unary',3,'p_unary_power','stanparser.py',346),
  ('unary -> base DOTPOWER unary','unary',3,'p_unary_dotpower','stanparser.py',351),
  ('base -> rightunary','base',1,'p_base_rightunary','stanparser.py',360),
  ('rightunary -> rightunary TRANSPOSE','rightunary',2,'p_rightunary_transpose','stanparser.py',366),
  ('rightunary -> rightunary LBRACKET range RBRACKET','rightunary',4,'p_rightunary_indexing','stanparser.py',371),
  ('range_list -> range COMMA range','range_list',3,'p_range_list','stanparser.py',377),
  ('range_list -> range COMMA range_list','range_list',3,'p_range_list','stanparser.py',378),
  ('rightunary -> rightunary LBRACKET range_list RBRACKET','rightunary',4,'p_rightunary_multiindexing','stanparser.py',390),
  ('rightunary -> primary','rightunary',1,'p_rightunary_primary','stanparser.py',395),
  ('primary -> LPAREN expression RPAREN','primary',3,'p_primary_par','stanparser.py',403),
  ('primary -> REAL','primary',1,'p_primary_real','stanparser.py',408),
  ('primary -> IMAG','primary',1,'p_primary_imag','stanparser.py',413),
  ('primary -> INT','primary',1,'p_primary_int','stanparser.py',418),
  ('primary -> STRING','primary',1,'p_primary_string','stanparser.py',423),
  ('primary -> ID','primary',1,'p_primary_id','stanparser.py',428),
  ('primary -> ID LPAREN RPAREN','primary',3,'p_primary_call','stanparser.py',434),
  ('primary -> ID LPAREN expression RPAREN','primary',4,'p_primary_call','stanparser.py',435),
  ('primary -> ID LPAREN expression_list RPAREN','primary',4,'p_primary_call','stanparser.py',436),
  ('primary -> ID LPAREN expression PIPE expression RPAREN','primary',6,'p_primary_pcall','stanparser.py',452),
  ('primary -> ID LPAREN expression PIPE expression_list RPAREN','primary',6,'p_primary_pcall','stanparser.py',453),
  ('primary -> LBRACKET expression_list RBRACKET','primary',3,'p_primary_literalrowvector','stanparser.py',471),
  ('primary -> LBRACKET expression RBRACKET','primary',3,'p_primary_literalrowvector','stanparser.py',472),
  ('primary -> LBRACKET RBRACKET','primary',2,'p_primary_literalrowvector','stanparser.py',473),
  ('primary -> LBRACE expression_list RBRACE','primary',3,'p_primary_literalarray','stanparser.py',487),
  ('primary -> LBRACE expression RBRACE','primary',3,'p_primary_literalarray','stanparser.py',488),
  ('primary -> LBRACE RBRACE','primary',2,'p_primary_literalarray','stanparser.py',489),
  ('expression_list -> expression COMMA expression','expression_list',3,'p_expression_list','stanparser.py',503),
  ('expression_list -> expression COMMA expression_list','expression_list',3,'p_expression_list','stanparser.py',504),
  ('lbound -> LOWER ASSIGN arithmatic','lbound',3,'p_lbound','stanparser.py',516),
  ('ubound -> UPPER ASSIGN arithmatic','ubound',3,'p_ubound','stanparser.py',522),
  ('chevrons -> LESS lbound GREATER','chevrons',3,'p_chevrons','stanparser.py',529),
  ('chevrons -> LESS ubound GREATER','chevrons',3,'p_chevrons','stanparser.py',530),
  ('chevrons -> LESS lbound COMMA ubound GREATER','chevrons',5,'p_chevrons','stanparser.py',531),
  ('type_prim_scalar -> TYPE_REAL','type_prim_scalar',1,'p_type_prim_scalar','stanparser.py',544),
  ('type_prim_scalar -> TYPE_INT','type_prim_scalar',1,'p_type_prim_scalar','stanparser.py',545),
  ('type_scalar -> type_prim_scalar','type_scalar',1,'p_type_scalar','stanparser.py',552),
  ('type_scalar -> type_prim_scalar chevrons','type_scalar',2,'p_type_scalar','stanparser.py',553),
  ('type_prim_vector -> TYPE_VECTOR','type_prim_vector',1,'p_type_prim_vector','stanparser.py',567),
  ('type_prim_vector -> TYPE_ROW_VECTOR','type_prim_vector',1,'p_type_prim_vector','stanparser.py',568),
  ('type_vector -> type_prim_vector LBRACKET expression RBRACKET','type_vector',4,'p_type_vector','stanparser.py',575),
  ('type_vector -> type_prim_vector chevrons LBRACKET expression RBRACKET','type_vector',5,'p_type_vector','stanparser.py',576),
  ('type_matrix -> TYPE_MATRIX LBRACKET expression COMMA expression RBRACKET','type_matrix',6,'p_type_matrix','stanparser.py',592),
  ('type_matrix -> TYPE_MATRIX chevrons LBRACKET expression COMMA expression RBRACKET','type_matrix',7,'p_type_matrix','stanparser.py',593),
  ('type_array -> TYPE_ARRAY LBRACKET expression RBRACKET type','type_array',5,'p_type_array','stanparser.py',609),
  ('type_array -> TYPE_ARRAY LBRACKET expression_list RBRACKET type','type_array',5,'p_type_array','stanparser.py',610),
  ('type_list -> type COMMA type','type_list',3,'p_type_list','stanparser.py',621),
  ('type_list -> type COMMA type_list','type_list',3,'p_type_list','stanparser.py',622),
  ('type_tuple -> TYPE_TUPLE LPAREN type_list RPAREN','type_tuple',4,'p_type_tuple','stanparser.py',636),
  ('type -> type_scalar','type',1,'p_type','stanparser.py',644),
  ('type -> type_vector','type',1,'p_type','stanparser.py',645),
  ('type -> type_matrix','type',1,'p_type','stanparser.py',646),
  ('type -> type_array','type',1,'p_type','stanparser.py',647),
  ('type -> type_tuple','type',1,'p_type','stanparser.py',648),
]
